
Electric Water Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000e2a  00000ebe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  00800062  00800062  00000ec0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ef0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c77  00000000  00000000  00001184  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c45  00000000  00000000  00002dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001353  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000560  00000000  00000000  00004d94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d3  00000000  00000000  000052f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001127  00000000  00000000  00005cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006dee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 27 02 	jmp	0x44e	; 0x44e <__vector_1>
   8:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_2>
   c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__vector_3>
  10:	0c 94 35 06 	jmp	0xc6a	; 0xc6a <__vector_4>
  14:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_10>
  2c:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e2       	ldi	r30, 0x2A	; 42
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 94 04 	call	0x928	; 0x928 <main>
  8a:	0c 94 13 07 	jmp	0xe26	; 0xe26 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:

void ADC_voidInit(void)
{
	
	/*Reference Selection Bits: AVCC with external capacitor at AREF pin*/
	SET_BIT(ADMUX,6);
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 64       	ori	r24, 0x40	; 64
  96:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
  98:	87 b1       	in	r24, 0x07	; 7
  9a:	8f 77       	andi	r24, 0x7F	; 127
  9c:	87 b9       	out	0x07, r24	; 7
	/* left adjust: 8 bit resolution Bit 5 – ADLAR: ADC Left Adjust Result */
	SET_BIT(ADMUX,5);
	
	#elif ADC_RESOLUTION == ADC_10_BIT_RESOLUTION
	/* right adjust: 8 bit resolution */
	CLR_BIT(ADMUX,5);
  9e:	87 b1       	in	r24, 0x07	; 7
  a0:	8f 7d       	andi	r24, 0xDF	; 223
  a2:	87 b9       	out	0x07, r24	; 7
	/*select prescaler /4
	CLR_BIT(ADCSRA,0);
	SET_BIT(ADCSRA,1);
	CLR_BIT(ADCSRA,2);
	*/
	ADCSRA &=0b11111000;
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	88 7f       	andi	r24, 0xF8	; 248
  a8:	86 b9       	out	0x06, r24	; 6
	ADCSRA |=ADC_PRESCALER;
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	86 b9       	out	0x06, r24	; 6

	/*Bit 7 – ADEN: ADC Enable*/
	SET_BIT(ADCSRA,7);
  b0:	86 b1       	in	r24, 0x06	; 6
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	86 b9       	out	0x06, r24	; 6
  b6:	08 95       	ret

000000b8 <ADC_u8StartConversion>:
u8 ADC_u8StartConversion(u8 copy_u8_Channel_ID, u16 * copy_pu16_Result)
{
	u8 local_u8_Err_state=OK;
	
	/*set channel */
	ADMUX  &=0b11100000;
  b8:	97 b1       	in	r25, 0x07	; 7
  ba:	90 7e       	andi	r25, 0xE0	; 224
  bc:	97 b9       	out	0x07, r25	; 7
	ADMUX  |= copy_u8_Channel_ID;
  be:	97 b1       	in	r25, 0x07	; 7
  c0:	89 2b       	or	r24, r25
  c2:	87 b9       	out	0x07, r24	; 7
	
	/*START conversion*/
	SET_BIT(ADCSRA,6);
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	86 b9       	out	0x06, r24	; 6
	
	/*busy waiting until flag = 1*/
	while (GET_BIT(ADCSRA,4) == 0);
  ca:	34 9b       	sbis	0x06, 4	; 6
  cc:	fe cf       	rjmp	.-4      	; 0xca <ADC_u8StartConversion+0x12>

	/*clear flag*/
	SET_BIT(ADCSRA,4);
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	86 b9       	out	0x06, r24	; 6
	
	/*get reading*/
	if (copy_pu16_Result != NULL)
  d4:	61 15       	cp	r22, r1
  d6:	71 05       	cpc	r23, r1
  d8:	39 f0       	breq	.+14     	; 0xe8 <ADC_u8StartConversion+0x30>
		//get 8bit data
		*copy_pu16_Result = ADCH;
		
		#elif ADC_RESOLUTION == ADC_10_BIT_RESOLUTION
		//get 10bit data
		*copy_pu16_Result = ADC_10_BIT_DATA;
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	95 b1       	in	r25, 0x05	; 5
  de:	fb 01       	movw	r30, r22
  e0:	91 83       	std	Z+1, r25	; 0x01
  e2:	80 83       	st	Z, r24
	
	
}
u8 ADC_u8StartConversion(u8 copy_u8_Channel_ID, u16 * copy_pu16_Result)
{
	u8 local_u8_Err_state=OK;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	08 95       	ret
		
		
	}
	else
	{
		local_u8_Err_state=NOK;
  e8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	
	return local_u8_Err_state;
  ea:	08 95       	ret

000000ec <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
	
	if(Copy_u8PinNumber>=DIO_PIN0 && Copy_u8PinNumber<= DIO_PIN7){
  ec:	68 30       	cpi	r22, 0x08	; 8
  ee:	08 f0       	brcs	.+2      	; 0xf2 <DIO_u8SetPinDirection+0x6>
  f0:	78 c0       	rjmp	.+240    	; 0x1e2 <DIO_u8SetPinDirection+0xf6>
		if(Copy_u8PinDirection == DIO_PIN_OUTPUT){
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	c1 f5       	brne	.+112    	; 0x166 <DIO_u8SetPinDirection+0x7a>
			
			switch(Copy_u8PortName)
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	91 f0       	breq	.+36     	; 0x11e <DIO_u8SetPinDirection+0x32>
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_u8SetPinDirection+0x1a>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	d9 f0       	breq	.+54     	; 0x136 <DIO_u8SetPinDirection+0x4a>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	29 f1       	breq	.+74     	; 0x14e <DIO_u8SetPinDirection+0x62>
 104:	70 c0       	rjmp	.+224    	; 0x1e6 <DIO_u8SetPinDirection+0xfa>
			
			{
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8PinNumber); break;
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_u8SetPinDirection+0x26>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_u8SetPinDirection+0x22>
 116:	82 2b       	or	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
 11a:	81 e0       	ldi	r24, 0x01	; 1
		if(Copy_u8PinDirection == DIO_PIN_OUTPUT){
			
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8PinNumber); break;
 11c:	08 95       	ret
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8PinNumber); break;
 11e:	27 b3       	in	r18, 0x17	; 23
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_u8SetPinDirection+0x3e>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_u8SetPinDirection+0x3a>
 12e:	82 2b       	or	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
 132:	81 e0       	ldi	r24, 0x01	; 1
			
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8PinNumber); break;
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8PinNumber); break;
 134:	08 95       	ret
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8PinNumber); break;
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_u8SetPinDirection+0x56>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_u8SetPinDirection+0x52>
 146:	82 2b       	or	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
 14a:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8PinNumber); break;
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8PinNumber); break;
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8PinNumber); break;
 14c:	08 95       	ret
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8PinNumber); break;
 14e:	21 b3       	in	r18, 0x11	; 17
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_u8SetPinDirection+0x6e>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_u8SetPinDirection+0x6a>
 15e:	82 2b       	or	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
 162:	81 e0       	ldi	r24, 0x01	; 1
			
			{
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8PinNumber); break;
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8PinNumber); break;
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8PinNumber); break;
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8PinNumber); break;
 164:	08 95       	ret
				default   :  Local_ERROR_STATE=NOK;             break;
			}
			
		}
		else if (Copy_u8PinDirection == DIO_PIN_INPUT){
 166:	41 11       	cpse	r20, r1
 168:	40 c0       	rjmp	.+128    	; 0x1ea <DIO_u8SetPinDirection+0xfe>
			
			switch(Copy_u8PortName)
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	99 f0       	breq	.+38     	; 0x194 <DIO_u8SetPinDirection+0xa8>
 16e:	28 f0       	brcs	.+10     	; 0x17a <DIO_u8SetPinDirection+0x8e>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	e9 f0       	breq	.+58     	; 0x1ae <DIO_u8SetPinDirection+0xc2>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	41 f1       	breq	.+80     	; 0x1c8 <DIO_u8SetPinDirection+0xdc>
 178:	3a c0       	rjmp	.+116    	; 0x1ee <DIO_u8SetPinDirection+0x102>
			
			{
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PinNumber); break;
 17a:	2a b3       	in	r18, 0x1a	; 26
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_u8SetPinDirection+0x9a>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_u8SetPinDirection+0x96>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	8a bb       	out	0x1a, r24	; 26
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
 190:	81 e0       	ldi	r24, 0x01	; 1
		else if (Copy_u8PinDirection == DIO_PIN_INPUT){
			
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PinNumber); break;
 192:	08 95       	ret
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PinNumber); break;
 194:	27 b3       	in	r18, 0x17	; 23
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_u8SetPinDirection+0xb4>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_u8SetPinDirection+0xb0>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	87 bb       	out	0x17, r24	; 23
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
 1aa:	81 e0       	ldi	r24, 0x01	; 1
			
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PinNumber); break;
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PinNumber); break;
 1ac:	08 95       	ret
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PinNumber); break;
 1ae:	24 b3       	in	r18, 0x14	; 20
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_u8SetPinDirection+0xce>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_u8SetPinDirection+0xca>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	84 bb       	out	0x14, r24	; 20
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
 1c4:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PinNumber); break;
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PinNumber); break;
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PinNumber); break;
 1c6:	08 95       	ret
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PinNumber); break;
 1c8:	21 b3       	in	r18, 0x11	; 17
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_u8SetPinDirection+0xe8>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_u8SetPinDirection+0xe4>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	81 bb       	out	0x11, r24	; 17
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinDirection){
	
	u8 Local_ERROR_STATE = OK;	
 1de:	81 e0       	ldi	r24, 0x01	; 1
			
			{
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PinNumber); break;
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PinNumber); break;
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PinNumber); break;
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PinNumber); break;
 1e0:	08 95       	ret
		else {
			Local_ERROR_STATE= NOK;
		}
	}
	else{
		Local_ERROR_STATE=NOK;
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
			{
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8PinNumber); break;
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8PinNumber); break;
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8PinNumber); break;
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8PinNumber); break;
				default   :  Local_ERROR_STATE=NOK;             break;
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	08 95       	ret
				default   :  Local_ERROR_STATE=NOK;             break;
			}
			
		}
		else {
			Local_ERROR_STATE= NOK;
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
			{
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8PinNumber); break;
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8PinNumber); break;
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8PinNumber); break;
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8PinNumber); break;
				default   :  Local_ERROR_STATE=NOK;             break;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
		Local_ERROR_STATE=NOK;
	}
	
	return Local_ERROR_STATE;
	
}
 1f0:	08 95       	ret

000001f2 <DIO_u8SetPinValue>:
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
	
	if(Copy_u8PinNumber>=DIO_PIN0 && Copy_u8PinNumber<= DIO_PIN7){
 1f2:	68 30       	cpi	r22, 0x08	; 8
 1f4:	08 f0       	brcs	.+2      	; 0x1f8 <DIO_u8SetPinValue+0x6>
 1f6:	78 c0       	rjmp	.+240    	; 0x2e8 <DIO_u8SetPinValue+0xf6>
		if(Copy_u8PinValue == DIO_PIN_HIGH){
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	c1 f5       	brne	.+112    	; 0x26c <DIO_u8SetPinValue+0x7a>
			
			switch(Copy_u8PortName)
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	91 f0       	breq	.+36     	; 0x224 <DIO_u8SetPinValue+0x32>
 200:	28 f0       	brcs	.+10     	; 0x20c <DIO_u8SetPinValue+0x1a>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	d9 f0       	breq	.+54     	; 0x23c <DIO_u8SetPinValue+0x4a>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	29 f1       	breq	.+74     	; 0x254 <DIO_u8SetPinValue+0x62>
 20a:	70 c0       	rjmp	.+224    	; 0x2ec <DIO_u8SetPinValue+0xfa>
			
			{
				case DIO_PORTA : SET_BIT(PORTA,Copy_u8PinNumber); break;
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_u8SetPinValue+0x26>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_u8SetPinValue+0x22>
 21c:	82 2b       	or	r24, r18
 21e:	8b bb       	out	0x1b, r24	; 27
	return Local_ERROR_STATE;
	
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
 220:	81 e0       	ldi	r24, 0x01	; 1
		if(Copy_u8PinValue == DIO_PIN_HIGH){
			
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : SET_BIT(PORTA,Copy_u8PinNumber); break;
 222:	08 95       	ret
				case DIO_PORTB : SET_BIT(PORTB,Copy_u8PinNumber); break;
 224:	28 b3       	in	r18, 0x18	; 24
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_u8SetPinValue+0x3e>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_u8SetPinValue+0x3a>
 234:	82 2b       	or	r24, r18
 236:	88 bb       	out	0x18, r24	; 24
	return Local_ERROR_STATE;
	
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
 238:	81 e0       	ldi	r24, 0x01	; 1
			
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : SET_BIT(PORTA,Copy_u8PinNumber); break;
				case DIO_PORTB : SET_BIT(PORTB,Copy_u8PinNumber); break;
 23a:	08 95       	ret
				case DIO_PORTC : SET_BIT(PORTC,Copy_u8PinNumber); break;
 23c:	25 b3       	in	r18, 0x15	; 21
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_u8SetPinValue+0x56>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_u8SetPinValue+0x52>
 24c:	82 2b       	or	r24, r18
 24e:	85 bb       	out	0x15, r24	; 21
	return Local_ERROR_STATE;
	
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
 250:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : SET_BIT(PORTA,Copy_u8PinNumber); break;
				case DIO_PORTB : SET_BIT(PORTB,Copy_u8PinNumber); break;
				case DIO_PORTC : SET_BIT(PORTC,Copy_u8PinNumber); break;
 252:	08 95       	ret
				case DIO_PORTD : SET_BIT(PORTD,Copy_u8PinNumber); break;
 254:	22 b3       	in	r18, 0x12	; 18
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_u8SetPinValue+0x6e>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_u8SetPinValue+0x6a>
 264:	82 2b       	or	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
	return Local_ERROR_STATE;
	
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
 268:	81 e0       	ldi	r24, 0x01	; 1
			
			{
				case DIO_PORTA : SET_BIT(PORTA,Copy_u8PinNumber); break;
				case DIO_PORTB : SET_BIT(PORTB,Copy_u8PinNumber); break;
				case DIO_PORTC : SET_BIT(PORTC,Copy_u8PinNumber); break;
				case DIO_PORTD : SET_BIT(PORTD,Copy_u8PinNumber); break;
 26a:	08 95       	ret
				default   :  Local_ERROR_STATE=NOK;             break;
			}
			
		}
		else if (Copy_u8PinValue == DIO_PIN_LOW){
 26c:	41 11       	cpse	r20, r1
 26e:	40 c0       	rjmp	.+128    	; 0x2f0 <DIO_u8SetPinValue+0xfe>
			
			switch(Copy_u8PortName)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	99 f0       	breq	.+38     	; 0x29a <DIO_u8SetPinValue+0xa8>
 274:	28 f0       	brcs	.+10     	; 0x280 <DIO_u8SetPinValue+0x8e>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	e9 f0       	breq	.+58     	; 0x2b4 <DIO_u8SetPinValue+0xc2>
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	41 f1       	breq	.+80     	; 0x2ce <DIO_u8SetPinValue+0xdc>
 27e:	3a c0       	rjmp	.+116    	; 0x2f4 <DIO_u8SetPinValue+0x102>
			
			{
				case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PinNumber); break;
 280:	2b b3       	in	r18, 0x1b	; 27
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_u8SetPinValue+0x9a>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	6a 95       	dec	r22
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_u8SetPinValue+0x96>
 290:	80 95       	com	r24
 292:	82 23       	and	r24, r18
 294:	8b bb       	out	0x1b, r24	; 27
	return Local_ERROR_STATE;
	
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
 296:	81 e0       	ldi	r24, 0x01	; 1
		else if (Copy_u8PinValue == DIO_PIN_LOW){
			
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PinNumber); break;
 298:	08 95       	ret
				case DIO_PORTB : CLR_BIT(PORTB,Copy_u8PinNumber); break;
 29a:	28 b3       	in	r18, 0x18	; 24
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_u8SetPinValue+0xb4>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_u8SetPinValue+0xb0>
 2aa:	80 95       	com	r24
 2ac:	82 23       	and	r24, r18
 2ae:	88 bb       	out	0x18, r24	; 24
	return Local_ERROR_STATE;
	
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
			
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PinNumber); break;
				case DIO_PORTB : CLR_BIT(PORTB,Copy_u8PinNumber); break;
 2b2:	08 95       	ret
				case DIO_PORTC : CLR_BIT(PORTC,Copy_u8PinNumber); break;
 2b4:	25 b3       	in	r18, 0x15	; 21
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_u8SetPinValue+0xce>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_u8SetPinValue+0xca>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	85 bb       	out	0x15, r24	; 21
	return Local_ERROR_STATE;
	
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
			switch(Copy_u8PortName)
			
			{
				case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PinNumber); break;
				case DIO_PORTB : CLR_BIT(PORTB,Copy_u8PinNumber); break;
				case DIO_PORTC : CLR_BIT(PORTC,Copy_u8PinNumber); break;
 2cc:	08 95       	ret
				case DIO_PORTD : CLR_BIT(PORTD,Copy_u8PinNumber); break;
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_u8SetPinValue+0xe8>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_u8SetPinValue+0xe4>
 2de:	80 95       	com	r24
 2e0:	82 23       	and	r24, r18
 2e2:	82 bb       	out	0x12, r24	; 18
	return Local_ERROR_STATE;
	
}
u8 DIO_u8SetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNumber, u8 Copy_u8PinValue){
	
	u8 Local_ERROR_STATE = OK;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
			
			{
				case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PinNumber); break;
				case DIO_PORTB : CLR_BIT(PORTB,Copy_u8PinNumber); break;
				case DIO_PORTC : CLR_BIT(PORTC,Copy_u8PinNumber); break;
				case DIO_PORTD : CLR_BIT(PORTD,Copy_u8PinNumber); break;
 2e6:	08 95       	ret
		else {
			Local_ERROR_STATE= NOK;
		}
	}
	else{
		Local_ERROR_STATE=NOK;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
			{
				case DIO_PORTA : SET_BIT(PORTA,Copy_u8PinNumber); break;
				case DIO_PORTB : SET_BIT(PORTB,Copy_u8PinNumber); break;
				case DIO_PORTC : SET_BIT(PORTC,Copy_u8PinNumber); break;
				case DIO_PORTD : SET_BIT(PORTD,Copy_u8PinNumber); break;
				default   :  Local_ERROR_STATE=NOK;             break;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
				default   :  Local_ERROR_STATE=NOK;             break;
			}
			
		}
		else {
			Local_ERROR_STATE= NOK;
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	08 95       	ret
			{
				case DIO_PORTA : CLR_BIT(PORTA,Copy_u8PinNumber); break;
				case DIO_PORTB : CLR_BIT(PORTB,Copy_u8PinNumber); break;
				case DIO_PORTC : CLR_BIT(PORTC,Copy_u8PinNumber); break;
				case DIO_PORTD : CLR_BIT(PORTD,Copy_u8PinNumber); break;
				default   :  Local_ERROR_STATE=NOK;             break;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
		Local_ERROR_STATE=NOK;
	}
	
	return Local_ERROR_STATE;
	
}
 2f6:	08 95       	ret

000002f8 <eepromWrite>:
Bit 0 – EERE: EEPROM Read Enable*/
#include <avr/io.h>
/*EEPROM Write Function*/
void eepromWrite(unsigned int addr,unsigned char dat){

	while(EECR&(1<<EEWE));
 2f8:	e1 99       	sbic	0x1c, 1	; 28
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <eepromWrite>
	/*Set up address and data registers*/
	EEAR=addr;
 2fc:	9f bb       	out	0x1f, r25	; 31
 2fe:	8e bb       	out	0x1e, r24	; 30
	EEDR=dat;
 300:	6d bb       	out	0x1d, r22	; 29
	/*Write logical 1 to EEMWE*/
	EECR|=(1<<EEMWE);
 302:	8c b3       	in	r24, 0x1c	; 28
 304:	84 60       	ori	r24, 0x04	; 4
 306:	8c bb       	out	0x1c, r24	; 28
	/*Start eeprom write by setting EEWE*/
	EECR|=(1<<EEWE);
 308:	8c b3       	in	r24, 0x1c	; 28
 30a:	82 60       	ori	r24, 0x02	; 2
 30c:	8c bb       	out	0x1c, r24	; 28
 30e:	08 95       	ret

00000310 <eepromRead>:
}

/*EEPROM Read Function*/
unsigned char eepromRead(unsigned int addr){
	/*Wait for completion of previous write*/
	while(EECR&(1<<EEWE));
 310:	e1 99       	sbic	0x1c, 1	; 28
 312:	fe cf       	rjmp	.-4      	; 0x310 <eepromRead>
	/*Set up address register*/
	EEAR=addr;
 314:	9f bb       	out	0x1f, r25	; 31
 316:	8e bb       	out	0x1e, r24	; 30
	/*Start eeprom read by writing EERE*/
	EECR|=(1<<EERE);
 318:	8c b3       	in	r24, 0x1c	; 28
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	8c bb       	out	0x1c, r24	; 28
	/*Return data from data register*/
	return EEDR;
 31e:	8d b3       	in	r24, 0x1d	; 29
 320:	08 95       	ret

00000322 <EXTI_voidPeripheralINT_enable>:
		
	}
	return Local_ERROR_STATE;
	
	
}
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	81 f1       	breq	.+96     	; 0x386 <EXTI_voidPeripheralINT_enable+0x64>
 326:	20 f0       	brcs	.+8      	; 0x330 <EXTI_voidPeripheralINT_enable+0xe>
 328:	82 30       	cpi	r24, 0x02	; 2
 32a:	09 f4       	brne	.+2      	; 0x32e <EXTI_voidPeripheralINT_enable+0xc>
 32c:	57 c0       	rjmp	.+174    	; 0x3dc <EXTI_voidPeripheralINT_enable+0xba>
 32e:	68 c0       	rjmp	.+208    	; 0x400 <__EEPROM_REGION_LENGTH__>
 330:	8b b7       	in	r24, 0x3b	; 59
 332:	80 64       	ori	r24, 0x40	; 64
 334:	8b bf       	out	0x3b, r24	; 59
 336:	61 30       	cpi	r22, 0x01	; 1
 338:	71 f0       	breq	.+28     	; 0x356 <EXTI_voidPeripheralINT_enable+0x34>
 33a:	28 f0       	brcs	.+10     	; 0x346 <EXTI_voidPeripheralINT_enable+0x24>
 33c:	62 30       	cpi	r22, 0x02	; 2
 33e:	99 f0       	breq	.+38     	; 0x366 <EXTI_voidPeripheralINT_enable+0x44>
 340:	63 30       	cpi	r22, 0x03	; 3
 342:	c9 f0       	breq	.+50     	; 0x376 <EXTI_voidPeripheralINT_enable+0x54>
 344:	5f c0       	rjmp	.+190    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 346:	85 b7       	in	r24, 0x35	; 53
 348:	8e 7f       	andi	r24, 0xFE	; 254
 34a:	85 bf       	out	0x35, r24	; 53
 34c:	85 b7       	in	r24, 0x35	; 53
 34e:	8d 7f       	andi	r24, 0xFD	; 253
 350:	85 bf       	out	0x35, r24	; 53
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	08 95       	ret
 356:	85 b7       	in	r24, 0x35	; 53
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	85 bf       	out	0x35, r24	; 53
 35c:	85 b7       	in	r24, 0x35	; 53
 35e:	82 60       	ori	r24, 0x02	; 2
 360:	85 bf       	out	0x35, r24	; 53
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	08 95       	ret
 366:	85 b7       	in	r24, 0x35	; 53
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	85 bf       	out	0x35, r24	; 53
 36c:	85 b7       	in	r24, 0x35	; 53
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	85 bf       	out	0x35, r24	; 53
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	08 95       	ret
 376:	85 b7       	in	r24, 0x35	; 53
 378:	81 60       	ori	r24, 0x01	; 1
 37a:	85 bf       	out	0x35, r24	; 53
 37c:	85 b7       	in	r24, 0x35	; 53
 37e:	8d 7f       	andi	r24, 0xFD	; 253
 380:	85 bf       	out	0x35, r24	; 53
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	08 95       	ret
 386:	8b b7       	in	r24, 0x3b	; 59
 388:	80 68       	ori	r24, 0x80	; 128
 38a:	8b bf       	out	0x3b, r24	; 59
 38c:	61 30       	cpi	r22, 0x01	; 1
 38e:	71 f0       	breq	.+28     	; 0x3ac <EXTI_voidPeripheralINT_enable+0x8a>
 390:	28 f0       	brcs	.+10     	; 0x39c <EXTI_voidPeripheralINT_enable+0x7a>
 392:	62 30       	cpi	r22, 0x02	; 2
 394:	99 f0       	breq	.+38     	; 0x3bc <EXTI_voidPeripheralINT_enable+0x9a>
 396:	63 30       	cpi	r22, 0x03	; 3
 398:	c9 f0       	breq	.+50     	; 0x3cc <EXTI_voidPeripheralINT_enable+0xaa>
 39a:	36 c0       	rjmp	.+108    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 39c:	85 b7       	in	r24, 0x35	; 53
 39e:	8b 7f       	andi	r24, 0xFB	; 251
 3a0:	85 bf       	out	0x35, r24	; 53
 3a2:	85 b7       	in	r24, 0x35	; 53
 3a4:	87 7f       	andi	r24, 0xF7	; 247
 3a6:	85 bf       	out	0x35, r24	; 53
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	08 95       	ret
 3ac:	85 b7       	in	r24, 0x35	; 53
 3ae:	84 60       	ori	r24, 0x04	; 4
 3b0:	85 bf       	out	0x35, r24	; 53
 3b2:	85 b7       	in	r24, 0x35	; 53
 3b4:	88 60       	ori	r24, 0x08	; 8
 3b6:	85 bf       	out	0x35, r24	; 53
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	08 95       	ret
 3bc:	85 b7       	in	r24, 0x35	; 53
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	85 bf       	out	0x35, r24	; 53
 3c2:	85 b7       	in	r24, 0x35	; 53
 3c4:	88 60       	ori	r24, 0x08	; 8
 3c6:	85 bf       	out	0x35, r24	; 53
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret
 3cc:	85 b7       	in	r24, 0x35	; 53
 3ce:	84 60       	ori	r24, 0x04	; 4
 3d0:	85 bf       	out	0x35, r24	; 53
 3d2:	85 b7       	in	r24, 0x35	; 53
 3d4:	87 7f       	andi	r24, 0xF7	; 247
 3d6:	85 bf       	out	0x35, r24	; 53
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	08 95       	ret
 3dc:	8b b7       	in	r24, 0x3b	; 59
 3de:	80 62       	ori	r24, 0x20	; 32
 3e0:	8b bf       	out	0x3b, r24	; 59
 3e2:	61 30       	cpi	r22, 0x01	; 1
 3e4:	19 f0       	breq	.+6      	; 0x3ec <EXTI_voidPeripheralINT_enable+0xca>
 3e6:	62 30       	cpi	r22, 0x02	; 2
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <EXTI_voidPeripheralINT_enable+0xd4>
 3ea:	10 c0       	rjmp	.+32     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3ec:	84 b7       	in	r24, 0x34	; 52
 3ee:	80 64       	ori	r24, 0x40	; 64
 3f0:	84 bf       	out	0x34, r24	; 52
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	08 95       	ret
 3f6:	84 b7       	in	r24, 0x34	; 52
 3f8:	8f 7b       	andi	r24, 0xBF	; 191
 3fa:	84 bf       	out	0x34, r24	; 52
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	08 95       	ret
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret

00000410 <EXTI_u8CallBackFuntion>:

u8 EXTI_u8CallBackFuntion(u8 copy_u8IntID,void (*copy_pvoidAppFunction)(void))
{
	u8 local_err_state=OK;

	if(copy_pvoidAppFunction != NULL)
 410:	61 15       	cp	r22, r1
 412:	71 05       	cpc	r23, r1
 414:	c1 f0       	breq	.+48     	; 0x446 <EXTI_u8CallBackFuntion+0x36>
	{
		switch(copy_u8IntID)
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	51 f0       	breq	.+20     	; 0x42e <EXTI_u8CallBackFuntion+0x1e>
 41a:	18 f0       	brcs	.+6      	; 0x422 <EXTI_u8CallBackFuntion+0x12>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	69 f0       	breq	.+26     	; 0x43a <EXTI_u8CallBackFuntion+0x2a>
 420:	14 c0       	rjmp	.+40     	; 0x44a <EXTI_u8CallBackFuntion+0x3a>
		{
			case EXTI_INT0_ID :
			Global_APP_INT0_ptrFunction=copy_pvoidAppFunction;
 422:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <Global_APP_INT0_ptrFunction+0x1>
 426:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <Global_APP_INT0_ptrFunction>
}


u8 EXTI_u8CallBackFuntion(u8 copy_u8IntID,void (*copy_pvoidAppFunction)(void))
{
	u8 local_err_state=OK;
 42a:	81 e0       	ldi	r24, 0x01	; 1
		switch(copy_u8IntID)
		{
			case EXTI_INT0_ID :
			Global_APP_INT0_ptrFunction=copy_pvoidAppFunction;
			
			break;
 42c:	08 95       	ret
			case EXTI_INT1_ID :
			Global_APP_INT1_ptrFunction=copy_pvoidAppFunction;
 42e:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <Global_APP_INT1_ptrFunction+0x1>
 432:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <Global_APP_INT1_ptrFunction>
}


u8 EXTI_u8CallBackFuntion(u8 copy_u8IntID,void (*copy_pvoidAppFunction)(void))
{
	u8 local_err_state=OK;
 436:	81 e0       	ldi	r24, 0x01	; 1
			Global_APP_INT0_ptrFunction=copy_pvoidAppFunction;
			
			break;
			case EXTI_INT1_ID :
			Global_APP_INT1_ptrFunction=copy_pvoidAppFunction;
			break;
 438:	08 95       	ret
			case EXTI_INT2_ID :
			Global_APP_INT2_ptrFunction=copy_pvoidAppFunction;
 43a:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <__data_end+0x1>
 43e:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <__data_end>
}


u8 EXTI_u8CallBackFuntion(u8 copy_u8IntID,void (*copy_pvoidAppFunction)(void))
{
	u8 local_err_state=OK;
 442:	81 e0       	ldi	r24, 0x01	; 1
			case EXTI_INT1_ID :
			Global_APP_INT1_ptrFunction=copy_pvoidAppFunction;
			break;
			case EXTI_INT2_ID :
			Global_APP_INT2_ptrFunction=copy_pvoidAppFunction;
			break;
 444:	08 95       	ret
		
		
	}
	else
	{
		local_err_state=NOK;
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	08 95       	ret
			Global_APP_INT1_ptrFunction=copy_pvoidAppFunction;
			break;
			case EXTI_INT2_ID :
			Global_APP_INT2_ptrFunction=copy_pvoidAppFunction;
			break;
			default: local_err_state=NOK; break;
 44a:	80 e0       	ldi	r24, 0x00	; 0
	{
		local_err_state=NOK;
	}
	return local_err_state;
	
}
 44c:	08 95       	ret

0000044e <__vector_1>:


void __vector_1 (void) __attribute__((signal));
void __vector_1 (void){
 44e:	1f 92       	push	r1
 450:	0f 92       	push	r0
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	0f 92       	push	r0
 456:	11 24       	eor	r1, r1
 458:	2f 93       	push	r18
 45a:	3f 93       	push	r19
 45c:	4f 93       	push	r20
 45e:	5f 93       	push	r21
 460:	6f 93       	push	r22
 462:	7f 93       	push	r23
 464:	8f 93       	push	r24
 466:	9f 93       	push	r25
 468:	af 93       	push	r26
 46a:	bf 93       	push	r27
 46c:	ef 93       	push	r30
 46e:	ff 93       	push	r31
	
	if(Global_APP_INT0_ptrFunction!=NULL){
 470:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <Global_APP_INT0_ptrFunction>
 474:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <Global_APP_INT0_ptrFunction+0x1>
 478:	30 97       	sbiw	r30, 0x00	; 0
 47a:	09 f0       	breq	.+2      	; 0x47e <__vector_1+0x30>
		Global_APP_INT0_ptrFunction();
 47c:	09 95       	icall
	}
	else{
		
	}
	
}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	bf 91       	pop	r27
 484:	af 91       	pop	r26
 486:	9f 91       	pop	r25
 488:	8f 91       	pop	r24
 48a:	7f 91       	pop	r23
 48c:	6f 91       	pop	r22
 48e:	5f 91       	pop	r21
 490:	4f 91       	pop	r20
 492:	3f 91       	pop	r19
 494:	2f 91       	pop	r18
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <__vector_2>:
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
 4a0:	1f 92       	push	r1
 4a2:	0f 92       	push	r0
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	0f 92       	push	r0
 4a8:	11 24       	eor	r1, r1
 4aa:	2f 93       	push	r18
 4ac:	3f 93       	push	r19
 4ae:	4f 93       	push	r20
 4b0:	5f 93       	push	r21
 4b2:	6f 93       	push	r22
 4b4:	7f 93       	push	r23
 4b6:	8f 93       	push	r24
 4b8:	9f 93       	push	r25
 4ba:	af 93       	push	r26
 4bc:	bf 93       	push	r27
 4be:	ef 93       	push	r30
 4c0:	ff 93       	push	r31
	
	if(Global_APP_INT1_ptrFunction!=NULL){
 4c2:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <Global_APP_INT1_ptrFunction>
 4c6:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <Global_APP_INT1_ptrFunction+0x1>
 4ca:	30 97       	sbiw	r30, 0x00	; 0
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <__vector_2+0x30>
		Global_APP_INT1_ptrFunction();
 4ce:	09 95       	icall
	}
	else{
		
	}
	
}
 4d0:	ff 91       	pop	r31
 4d2:	ef 91       	pop	r30
 4d4:	bf 91       	pop	r27
 4d6:	af 91       	pop	r26
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	7f 91       	pop	r23
 4de:	6f 91       	pop	r22
 4e0:	5f 91       	pop	r21
 4e2:	4f 91       	pop	r20
 4e4:	3f 91       	pop	r19
 4e6:	2f 91       	pop	r18
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <__vector_3>:
void __vector_3 (void) __attribute__((signal));
void __vector_3 (void){
 4f2:	1f 92       	push	r1
 4f4:	0f 92       	push	r0
 4f6:	0f b6       	in	r0, 0x3f	; 63
 4f8:	0f 92       	push	r0
 4fa:	11 24       	eor	r1, r1
 4fc:	2f 93       	push	r18
 4fe:	3f 93       	push	r19
 500:	4f 93       	push	r20
 502:	5f 93       	push	r21
 504:	6f 93       	push	r22
 506:	7f 93       	push	r23
 508:	8f 93       	push	r24
 50a:	9f 93       	push	r25
 50c:	af 93       	push	r26
 50e:	bf 93       	push	r27
 510:	ef 93       	push	r30
 512:	ff 93       	push	r31

	if(Global_APP_INT2_ptrFunction!=NULL){
 514:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 518:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 51c:	30 97       	sbiw	r30, 0x00	; 0
 51e:	09 f0       	breq	.+2      	; 0x522 <__vector_3+0x30>
		Global_APP_INT2_ptrFunction();
 520:	09 95       	icall
	}
	else{
		
	}

 522:	ff 91       	pop	r31
 524:	ef 91       	pop	r30
 526:	bf 91       	pop	r27
 528:	af 91       	pop	r26
 52a:	9f 91       	pop	r25
 52c:	8f 91       	pop	r24
 52e:	7f 91       	pop	r23
 530:	6f 91       	pop	r22
 532:	5f 91       	pop	r21
 534:	4f 91       	pop	r20
 536:	3f 91       	pop	r19
 538:	2f 91       	pop	r18
 53a:	0f 90       	pop	r0
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	0f 90       	pop	r0
 540:	1f 90       	pop	r1
 542:	18 95       	reti

00000544 <GIE_Enable>:


void GIE_Enable(void)
{
	
	SET_BIT(SREG,7);
 544:	8f b7       	in	r24, 0x3f	; 63
 546:	80 68       	ori	r24, 0x80	; 128
 548:	8f bf       	out	0x3f, r24	; 63
 54a:	08 95       	ret

0000054c <LM35_TEMP_SENSOR_ON>:
#include "ERROR_STATE.h"

#include "LM35_interface.h"
#include "ADC_interface.h"

void LM35_TEMP_SENSOR_ON(volatile u8 * CURRENT_TEMP){
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	00 d0       	rcall	.+0      	; 0x556 <LM35_TEMP_SENSOR_ON+0xa>
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	8c 01       	movw	r16, r24
	u16 ADC_u16_Digital_Read = 0;
 55c:	1a 82       	std	Y+2, r1	; 0x02
 55e:	19 82       	std	Y+1, r1	; 0x01
	u32 ADC_u32_Analog_mv = 0;
	u16 LM35_u16_Result = 0;
	
	
	ADC_u8StartConversion(ADC_CHANNEL_ID_0,&ADC_u16_Digital_Read);
 560:	be 01       	movw	r22, r28
 562:	6f 5f       	subi	r22, 0xFF	; 255
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	0e 94 5c 00 	call	0xb8	; 0xb8 <ADC_u8StartConversion>
	ADC_u32_Analog_mv= ( ADC_u16_Digital_Read * 5000UL)/1024;    //10bits
 56c:	29 81       	ldd	r18, Y+1	; 0x01
 56e:	3a 81       	ldd	r19, Y+2	; 0x02
 570:	a8 e8       	ldi	r26, 0x88	; 136
 572:	b3 e1       	ldi	r27, 0x13	; 19
 574:	0e 94 04 07 	call	0xe08	; 0xe08 <__umulhisi3>
	LM35_u16_Result=ADC_u32_Analog_mv/10;
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	38 e2       	ldi	r19, 0x28	; 40
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	50 e0       	ldi	r21, 0x00	; 0
 580:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__udivmodsi4>
	
	*CURRENT_TEMP=(u8)LM35_u16_Result;
 584:	f8 01       	movw	r30, r16
 586:	20 83       	st	Z, r18
}
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	1f 91       	pop	r17
 592:	0f 91       	pop	r16
 594:	08 95       	ret

00000596 <app_exit_five_sec_ctc_timer_two>:


void app_exit_five_sec_ctc_timer_two (void)
{
	
	SS_EXIT_COUNTER++;
 596:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <SS_EXIT_COUNTER>
 59a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <SS_EXIT_COUNTER+0x1>
 59e:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <SS_EXIT_COUNTER+0x2>
 5a2:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <SS_EXIT_COUNTER+0x3>
 5a6:	01 96       	adiw	r24, 0x01	; 1
 5a8:	a1 1d       	adc	r26, r1
 5aa:	b1 1d       	adc	r27, r1
 5ac:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <SS_EXIT_COUNTER>
 5b0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <SS_EXIT_COUNTER+0x1>
 5b4:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <SS_EXIT_COUNTER+0x2>
 5b8:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <SS_EXIT_COUNTER+0x3>

	if(SS_EXIT_COUNTER == 5000)  // 5 sec
 5bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <SS_EXIT_COUNTER>
 5c0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <SS_EXIT_COUNTER+0x1>
 5c4:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <SS_EXIT_COUNTER+0x2>
 5c8:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <SS_EXIT_COUNTER+0x3>
 5cc:	88 38       	cpi	r24, 0x88	; 136
 5ce:	93 41       	sbci	r25, 0x13	; 19
 5d0:	a1 05       	cpc	r26, r1
 5d2:	b1 05       	cpc	r27, r1
 5d4:	61 f4       	brne	.+24     	; 0x5ee <app_exit_five_sec_ctc_timer_two+0x58>
	{
		SET_TEMP_UP=0;
 5d6:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <SET_TEMP_UP>
		SET_TEMP_DOWN=0;
 5da:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <SET_TEMP_DOWN>
		SS_EXIT_COUNTER = 0;
 5de:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <SS_EXIT_COUNTER>
 5e2:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <SS_EXIT_COUNTER+0x1>
 5e6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <SS_EXIT_COUNTER+0x2>
 5ea:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <SS_EXIT_COUNTER+0x3>
 5ee:	08 95       	ret

000005f0 <APP_INT2>:
	}
}


void APP_INT2(){
	if(ON_OFF==0){
 5f0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ON_OFF>
 5f4:	81 11       	cpse	r24, r1
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <APP_INT2+0x10>
		ON_OFF=1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <ON_OFF>
 5fe:	08 95       	ret
		
	}
	else if (ON_OFF==1){
 600:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ON_OFF>
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	69 f4       	brne	.+26     	; 0x622 <APP_INT2+0x32>
		ON_OFF=0;
 608:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <ON_OFF>
		CHANGE_IN_POWER_STATE_FLAG=1;
 60c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <CHANGE_IN_POWER_STATE_FLAG>
		DIO_u8SetPinValue(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);   // Turn off both displays
 610:	40 e0       	ldi	r20, 0x00	; 0
 612:	61 e0       	ldi	r22, 0x01	; 1
 614:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_PORTB, DIO_PIN0, DIO_PIN_LOW);   // Turn off both displays
 618:	40 e0       	ldi	r20, 0x00	; 0
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
 622:	08 95       	ret

00000624 <APP_INT0>:
	
}

void APP_INT0(){
	
	 SS_EXIT_COUNTER = 0;
 624:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <SS_EXIT_COUNTER>
 628:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <SS_EXIT_COUNTER+0x1>
 62c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <SS_EXIT_COUNTER+0x2>
 630:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <SS_EXIT_COUNTER+0x3>
	 TIMER2_u8CallBackFunction(TIMER2_CTC_MODE,app_exit_five_sec_ctc_timer_two);
 634:	6b ec       	ldi	r22, 0xCB	; 203
 636:	72 e0       	ldi	r23, 0x02	; 2
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 26 06 	call	0xc4c	; 0xc4c <TIMER2_u8CallBackFunction>
	if (SET_TEMP_UP==0 && ON_OFF==1){
 63e:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <SET_TEMP_UP>
 642:	81 11       	cpse	r24, r1
 644:	07 c0       	rjmp	.+14     	; 0x654 <APP_INT0+0x30>
 646:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ON_OFF>
 64a:	81 30       	cpi	r24, 0x01	; 1
 64c:	19 f4       	brne	.+6      	; 0x654 <APP_INT0+0x30>

		SET_TEMP_UP=1;
 64e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <SET_TEMP_UP>
 652:	08 95       	ret
		
	}
	else if(SET_TEMP_UP==1 && SET_TEMP<75){
 654:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <SET_TEMP_UP>
 658:	81 30       	cpi	r24, 0x01	; 1
 65a:	79 f4       	brne	.+30     	; 0x67a <APP_INT0+0x56>
 65c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SET_TEMP>
 660:	8b 34       	cpi	r24, 0x4B	; 75
 662:	58 f4       	brcc	.+22     	; 0x67a <APP_INT0+0x56>
		SET_TEMP+=5;
 664:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SET_TEMP>
 668:	8b 5f       	subi	r24, 0xFB	; 251
 66a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <SET_TEMP>
		eepromWrite(0,SET_TEMP);
 66e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <SET_TEMP>
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <eepromWrite>
 67a:	08 95       	ret

0000067c <APP_INT1>:
	}
}
void APP_INT1(){
	
	
	 SS_EXIT_COUNTER = 0;
 67c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <SS_EXIT_COUNTER>
 680:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <SS_EXIT_COUNTER+0x1>
 684:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <SS_EXIT_COUNTER+0x2>
 688:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <SS_EXIT_COUNTER+0x3>
	 TIMER2_u8CallBackFunction(TIMER2_CTC_MODE,app_exit_five_sec_ctc_timer_two);
 68c:	6b ec       	ldi	r22, 0xCB	; 203
 68e:	72 e0       	ldi	r23, 0x02	; 2
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	0e 94 26 06 	call	0xc4c	; 0xc4c <TIMER2_u8CallBackFunction>

	if (SET_TEMP_DOWN==0 && ON_OFF==1){
 696:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SET_TEMP_DOWN>
 69a:	81 11       	cpse	r24, r1
 69c:	07 c0       	rjmp	.+14     	; 0x6ac <APP_INT1+0x30>
 69e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ON_OFF>
 6a2:	81 30       	cpi	r24, 0x01	; 1
 6a4:	19 f4       	brne	.+6      	; 0x6ac <APP_INT1+0x30>
		SET_TEMP_DOWN=1;
 6a6:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <SET_TEMP_DOWN>
 6aa:	08 95       	ret
	}
	else if(SET_TEMP_DOWN==1 && SET_TEMP>35){
 6ac:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SET_TEMP_DOWN>
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	79 f4       	brne	.+30     	; 0x6d2 <APP_INT1+0x56>
 6b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SET_TEMP>
 6b8:	84 32       	cpi	r24, 0x24	; 36
 6ba:	58 f0       	brcs	.+22     	; 0x6d2 <APP_INT1+0x56>
		SET_TEMP-=5;
 6bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SET_TEMP>
 6c0:	85 50       	subi	r24, 0x05	; 5
 6c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <SET_TEMP>
		eepromWrite(0,SET_TEMP);
 6c6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <SET_TEMP>
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <eepromWrite>
 6d2:	08 95       	ret

000006d4 <Heating_And_Cooling>:



void Heating_And_Cooling(void){
	
	if(AVG_TEMP<(SET_TEMP-5)){
 6d4:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <AVG_TEMP>
 6d8:	30 e0       	ldi	r19, 0x00	; 0
 6da:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SET_TEMP>
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	05 97       	sbiw	r24, 0x05	; 5
 6e2:	28 17       	cp	r18, r24
 6e4:	39 07       	cpc	r19, r25
 6e6:	0c f5       	brge	.+66     	; 0x72a <Heating_And_Cooling+0x56>
		//Heater ON
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_HIGH);
 6e8:	41 e0       	ldi	r20, 0x01	; 1
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
		//Cooler OFF
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);
 6f2:	40 e0       	ldi	r20, 0x00	; 0
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	82 e0       	ldi	r24, 0x02	; 2
 6f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
		// Raise Heater LED Flag to blink every 1 sec
		Heater_Led_Flag=1;
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Heater_Led_Flag>
		
		if(Heater_OnOff_switch==1){
 702:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Heater_OnOff_switch>
 706:	81 30       	cpi	r24, 0x01	; 1
 708:	31 f4       	brne	.+12     	; 0x716 <Heating_And_Cooling+0x42>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
 70a:	41 e0       	ldi	r20, 0x01	; 1
 70c:	62 e0       	ldi	r22, 0x02	; 2
 70e:	82 e0       	ldi	r24, 0x02	; 2
 710:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
 714:	08 95       	ret
		}
		else if(Heater_OnOff_switch==0){
 716:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Heater_OnOff_switch>
 71a:	81 11       	cpse	r24, r1
 71c:	43 c0       	rjmp	.+134    	; 0x7a4 <Heating_And_Cooling+0xd0>
			DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 71e:	40 e0       	ldi	r20, 0x00	; 0
 720:	62 e0       	ldi	r22, 0x02	; 2
 722:	82 e0       	ldi	r24, 0x02	; 2
 724:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
 728:	08 95       	ret
		}
		
		
		
	}
	else if(AVG_TEMP>(SET_TEMP+5)){
 72a:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <AVG_TEMP>
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SET_TEMP>
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	05 96       	adiw	r24, 0x05	; 5
 738:	82 17       	cp	r24, r18
 73a:	93 07       	cpc	r25, r19
 73c:	d4 f4       	brge	.+52     	; 0x772 <Heating_And_Cooling+0x9e>
		//Lower the Heater LED Flag to close the 1 second heater led blink
		Heater_Led_Flag=0;
 73e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Heater_Led_Flag>
		Heater_Blink_Counter=0;
 742:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Heater_Blink_Counter>
 746:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Heater_Blink_Counter+0x1>
 74a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Heater_Blink_Counter+0x2>
 74e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Heater_Blink_Counter+0x3>
		//Heater OFF
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
 752:	40 e0       	ldi	r20, 0x00	; 0
 754:	60 e0       	ldi	r22, 0x00	; 0
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
		//Cooler ON
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_HIGH);
 75c:	41 e0       	ldi	r20, 0x01	; 1
 75e:	61 e0       	ldi	r22, 0x01	; 1
 760:	82 e0       	ldi	r24, 0x02	; 2
 762:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
		
		//Heating LED ON
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_HIGH);
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	62 e0       	ldi	r22, 0x02	; 2
 76a:	82 e0       	ldi	r24, 0x02	; 2
 76c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
 770:	08 95       	ret
	}
	else{
		Heater_Led_Flag=0;
 772:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Heater_Led_Flag>
		Heater_Blink_Counter=0;
 776:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Heater_Blink_Counter>
 77a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Heater_Blink_Counter+0x1>
 77e:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Heater_Blink_Counter+0x2>
 782:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Heater_Blink_Counter+0x3>
		//OFF heating LED
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 786:	40 e0       	ldi	r20, 0x00	; 0
 788:	62 e0       	ldi	r22, 0x02	; 2
 78a:	82 e0       	ldi	r24, 0x02	; 2
 78c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
		//OFF Heating And Cooling Elements
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
 790:	40 e0       	ldi	r20, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	82 e0       	ldi	r24, 0x02	; 2
 796:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	82 e0       	ldi	r24, 0x02	; 2
 7a0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
 7a4:	08 95       	ret

000007a6 <Last_Ten_Readings_AVG>:
	}
}

void Last_Ten_Readings_AVG(void){
	Reading_Counter++;
 7a6:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Reading_Counter>
 7aa:	8f 5f       	subi	r24, 0xFF	; 255
 7ac:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <Reading_Counter>
	Readings_Sum+=CURRENT_TEMP;
 7b0:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <CURRENT_TEMP>
 7b4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Readings_Sum>
 7b8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Readings_Sum+0x1>
 7bc:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <Readings_Sum+0x2>
 7c0:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <Readings_Sum+0x3>
 7c4:	82 0f       	add	r24, r18
 7c6:	91 1d       	adc	r25, r1
 7c8:	a1 1d       	adc	r26, r1
 7ca:	b1 1d       	adc	r27, r1
 7cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Readings_Sum>
 7d0:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Readings_Sum+0x1>
 7d4:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <Readings_Sum+0x2>
 7d8:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <Readings_Sum+0x3>
	if(Reading_Counter==10){
 7dc:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Reading_Counter>
 7e0:	8a 30       	cpi	r24, 0x0A	; 10
 7e2:	e1 f4       	brne	.+56     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
		AVG_TEMP=Readings_Sum/10;
 7e4:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <Readings_Sum>
 7e8:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <Readings_Sum+0x1>
 7ec:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Readings_Sum+0x2>
 7f0:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Readings_Sum+0x3>
 7f4:	2a e0       	ldi	r18, 0x0A	; 10
 7f6:	30 e0       	ldi	r19, 0x00	; 0
 7f8:	40 e0       	ldi	r20, 0x00	; 0
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <__udivmodsi4>
 800:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <AVG_TEMP>
		Reading_Counter=0;
 804:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <Reading_Counter>
		Readings_Sum=0;
 808:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Readings_Sum>
 80c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Readings_Sum+0x1>
 810:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Readings_Sum+0x2>
 814:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Readings_Sum+0x3>
		// do the heating and cooling after calculating the average of last 10 readings
		Heating_And_Cooling();
 818:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Heating_And_Cooling>
 81c:	08 95       	ret

0000081e <app_temp_sense_hundred_ms_ctc_timer_zero>:
}

void app_temp_sense_hundred_ms_ctc_timer_zero (void)
{
	
	TEMP_SENSE_COUNTER++;
 81e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <TEMP_SENSE_COUNTER>
 822:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <TEMP_SENSE_COUNTER+0x1>
 826:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <TEMP_SENSE_COUNTER+0x2>
 82a:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <TEMP_SENSE_COUNTER+0x3>
 82e:	01 96       	adiw	r24, 0x01	; 1
 830:	a1 1d       	adc	r26, r1
 832:	b1 1d       	adc	r27, r1
 834:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <TEMP_SENSE_COUNTER>
 838:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <TEMP_SENSE_COUNTER+0x1>
 83c:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <TEMP_SENSE_COUNTER+0x2>
 840:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <TEMP_SENSE_COUNTER+0x3>
	
	
	if(Heater_Led_Flag==1){
 844:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Heater_Led_Flag>
 848:	81 30       	cpi	r24, 0x01	; 1
 84a:	99 f4       	brne	.+38     	; 0x872 <__stack+0x13>
		
		Heater_Blink_Counter++;
 84c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Heater_Blink_Counter>
 850:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Heater_Blink_Counter+0x1>
 854:	a0 91 6b 00 	lds	r26, 0x006B	; 0x80006b <Heater_Blink_Counter+0x2>
 858:	b0 91 6c 00 	lds	r27, 0x006C	; 0x80006c <Heater_Blink_Counter+0x3>
 85c:	01 96       	adiw	r24, 0x01	; 1
 85e:	a1 1d       	adc	r26, r1
 860:	b1 1d       	adc	r27, r1
 862:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Heater_Blink_Counter>
 866:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Heater_Blink_Counter+0x1>
 86a:	a0 93 6b 00 	sts	0x006B, r26	; 0x80006b <Heater_Blink_Counter+0x2>
 86e:	b0 93 6c 00 	sts	0x006C, r27	; 0x80006c <Heater_Blink_Counter+0x3>
	}
	
	
	if(TEMP_SENSE_COUNTER == 1000)  // 100 ms
 872:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <TEMP_SENSE_COUNTER>
 876:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <TEMP_SENSE_COUNTER+0x1>
 87a:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <TEMP_SENSE_COUNTER+0x2>
 87e:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <TEMP_SENSE_COUNTER+0x3>
 882:	88 3e       	cpi	r24, 0xE8	; 232
 884:	93 40       	sbci	r25, 0x03	; 3
 886:	a1 05       	cpc	r26, r1
 888:	b1 05       	cpc	r27, r1
 88a:	71 f4       	brne	.+28     	; 0x8a8 <__stack+0x49>
	{
		LM35_TEMP_SENSOR_ON(&CURRENT_TEMP);
 88c:	81 e6       	ldi	r24, 0x61	; 97
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 a6 02 	call	0x54c	; 0x54c <LM35_TEMP_SENSOR_ON>
		TEMP_SENSE_COUNTER=0;
 894:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <TEMP_SENSE_COUNTER>
 898:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <TEMP_SENSE_COUNTER+0x1>
 89c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <TEMP_SENSE_COUNTER+0x2>
 8a0:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <TEMP_SENSE_COUNTER+0x3>
		Last_Ten_Readings_AVG();
 8a4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Last_Ten_Readings_AVG>
		

	}
	if(Heater_Blink_Counter== 10000){
 8a8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Heater_Blink_Counter>
 8ac:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Heater_Blink_Counter+0x1>
 8b0:	a0 91 6b 00 	lds	r26, 0x006B	; 0x80006b <Heater_Blink_Counter+0x2>
 8b4:	b0 91 6c 00 	lds	r27, 0x006C	; 0x80006c <Heater_Blink_Counter+0x3>
 8b8:	80 31       	cpi	r24, 0x10	; 16
 8ba:	97 42       	sbci	r25, 0x27	; 39
 8bc:	a1 05       	cpc	r26, r1
 8be:	b1 05       	cpc	r27, r1
 8c0:	b1 f4       	brne	.+44     	; 0x8ee <__stack+0x8f>
		Heater_Blink_Counter=0;
 8c2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Heater_Blink_Counter>
 8c6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Heater_Blink_Counter+0x1>
 8ca:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Heater_Blink_Counter+0x2>
 8ce:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Heater_Blink_Counter+0x3>
		if(Heater_OnOff_switch==0){
 8d2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Heater_OnOff_switch>
 8d6:	81 11       	cpse	r24, r1
 8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <__stack+0x83>
			Heater_OnOff_switch=1;
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Heater_OnOff_switch>
 8e0:	08 95       	ret
		}
		else if (Heater_OnOff_switch==1){
 8e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Heater_OnOff_switch>
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	11 f4       	brne	.+4      	; 0x8ee <__stack+0x8f>
			Heater_OnOff_switch=0;
 8ea:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Heater_OnOff_switch>
 8ee:	08 95       	ret

000008f0 <TEMP_OUT_SS>:
	
}


void TEMP_OUT_SS(){
	if ( (SET_TEMP_UP==0) && (SET_TEMP_DOWN==0) ){
 8f0:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <SET_TEMP_UP>
 8f4:	81 11       	cpse	r24, r1
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <TEMP_OUT_SS+0x1a>
 8f8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SET_TEMP_DOWN>
 8fc:	81 11       	cpse	r24, r1
 8fe:	05 c0       	rjmp	.+10     	; 0x90a <TEMP_OUT_SS+0x1a>
		SS_OUT(CURRENT_TEMP);
 900:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <CURRENT_TEMP>
 904:	0e 94 05 06 	call	0xc0a	; 0xc0a <SS_OUT>
 908:	08 95       	ret
	}
	else if( (SET_TEMP_UP==1) || (SET_TEMP_DOWN==1) ){
 90a:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <SET_TEMP_UP>
 90e:	81 30       	cpi	r24, 0x01	; 1
 910:	21 f0       	breq	.+8      	; 0x91a <TEMP_OUT_SS+0x2a>
 912:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <SET_TEMP_DOWN>
 916:	81 30       	cpi	r24, 0x01	; 1
 918:	31 f4       	brne	.+12     	; 0x926 <TEMP_OUT_SS+0x36>

		SS_ONE_SEC_BLINK();
 91a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <SS_ONE_SEC_BLINK>
		SS_OUT(SET_TEMP);
 91e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <SET_TEMP>
 922:	0e 94 05 06 	call	0xc0a	; 0xc0a <SS_OUT>
 926:	08 95       	ret

00000928 <main>:



int main(void)
{
	eepromWrite(0,SET_TEMP);
 928:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <SET_TEMP>
 92c:	80 e0       	ldi	r24, 0x00	; 0
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <eepromWrite>
	
	SS_Init();
 934:	0e 94 3a 05 	call	0xa74	; 0xa74 <SS_Init>
	
	
	//Heating And Cooling Pins
	DIO_u8SetPinDirection(DIO_PORTC,DIO_PIN0,DIO_PIN_OUTPUT);
 938:	41 e0       	ldi	r20, 0x01	; 1
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	82 e0       	ldi	r24, 0x02	; 2
 93e:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTC,DIO_PIN1,DIO_PIN_OUTPUT);
 942:	41 e0       	ldi	r20, 0x01	; 1
 944:	61 e0       	ldi	r22, 0x01	; 1
 946:	82 e0       	ldi	r24, 0x02	; 2
 948:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
	
	//Heating LED Pin
	DIO_u8SetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
 94c:	41 e0       	ldi	r20, 0x01	; 1
 94e:	62 e0       	ldi	r22, 0x02	; 2
 950:	82 e0       	ldi	r24, 0x02	; 2
 952:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
	

	
	// intrupt 1 AND 0 pin as input
	DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
 956:	40 e0       	ldi	r20, 0x00	; 0
 958:	62 e0       	ldi	r22, 0x02	; 2
 95a:	83 e0       	ldi	r24, 0x03	; 3
 95c:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_INPUT);
 960:	40 e0       	ldi	r20, 0x00	; 0
 962:	63 e0       	ldi	r22, 0x03	; 3
 964:	83 e0       	ldi	r24, 0x03	; 3
 966:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
	
	// intrupt 2 pin as input
	DIO_u8SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_INPUT);
 96a:	40 e0       	ldi	r20, 0x00	; 0
 96c:	62 e0       	ldi	r22, 0x02	; 2
 96e:	81 e0       	ldi	r24, 0x01	; 1
 970:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
	
	//internal pullup on for interupts
	DIO_u8SetPinValue(DIO_PORTD,DIO_PIN2,DIO_PIN_HIGH);
 974:	41 e0       	ldi	r20, 0x01	; 1
 976:	62 e0       	ldi	r22, 0x02	; 2
 978:	83 e0       	ldi	r24, 0x03	; 3
 97a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PORTD,DIO_PIN3,DIO_PIN_HIGH);
 97e:	41 e0       	ldi	r20, 0x01	; 1
 980:	63 e0       	ldi	r22, 0x03	; 3
 982:	83 e0       	ldi	r24, 0x03	; 3
 984:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_HIGH);
 988:	41 e0       	ldi	r20, 0x01	; 1
 98a:	62 e0       	ldi	r22, 0x02	; 2
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
	
	// intrupt enable
	EXTI_voidPeripheralINT_enable(EXTI_INT0_ID,EXTI_SENSE_CTRL_FALLING_EDGE);
 992:	62 e0       	ldi	r22, 0x02	; 2
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	0e 94 91 01 	call	0x322	; 0x322 <EXTI_voidPeripheralINT_enable>
	EXTI_voidPeripheralINT_enable(EXTI_INT1_ID,EXTI_SENSE_CTRL_FALLING_EDGE);
 99a:	62 e0       	ldi	r22, 0x02	; 2
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	0e 94 91 01 	call	0x322	; 0x322 <EXTI_voidPeripheralINT_enable>
	EXTI_voidPeripheralINT_enable(EXTI_INT2_ID,EXTI_SENSE_CTRL_FALLING_EDGE);
 9a2:	62 e0       	ldi	r22, 0x02	; 2
 9a4:	82 e0       	ldi	r24, 0x02	; 2
 9a6:	0e 94 91 01 	call	0x322	; 0x322 <EXTI_voidPeripheralINT_enable>
	EXTI_u8CallBackFuntion(EXTI_INT0_ID,APP_INT0);
 9aa:	62 e1       	ldi	r22, 0x12	; 18
 9ac:	73 e0       	ldi	r23, 0x03	; 3
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	0e 94 08 02 	call	0x410	; 0x410 <EXTI_u8CallBackFuntion>
	EXTI_u8CallBackFuntion(EXTI_INT1_ID,APP_INT1);
 9b4:	6e e3       	ldi	r22, 0x3E	; 62
 9b6:	73 e0       	ldi	r23, 0x03	; 3
 9b8:	81 e0       	ldi	r24, 0x01	; 1
 9ba:	0e 94 08 02 	call	0x410	; 0x410 <EXTI_u8CallBackFuntion>
	EXTI_u8CallBackFuntion(EXTI_INT2_ID,APP_INT2);
 9be:	68 ef       	ldi	r22, 0xF8	; 248
 9c0:	72 e0       	ldi	r23, 0x02	; 2
 9c2:	82 e0       	ldi	r24, 0x02	; 2
 9c4:	0e 94 08 02 	call	0x410	; 0x410 <EXTI_u8CallBackFuntion>
	
	/*ADC CHANNEL 0 INPUT  LM35*/
	DIO_u8SetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
 9c8:	40 e0       	ldi	r20, 0x00	; 0
 9ca:	60 e0       	ldi	r22, 0x00	; 0
 9cc:	80 e0       	ldi	r24, 0x00	; 0
 9ce:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
	
	ADC_voidInit();	
 9d2:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	
	GIE_Enable();
 9d6:	0e 94 a2 02 	call	0x544	; 0x544 <GIE_Enable>
	TIMER0_voidInit();
 9da:	0e 94 68 06 	call	0xcd0	; 0xcd0 <TIMER0_voidInit>
	TIMER2_voidInit();
 9de:	0e 94 14 06 	call	0xc28	; 0xc28 <TIMER2_voidInit>
	
    while (1) 
    {
		
		
		if(CHANGE_IN_POWER_STATE_FLAG==1){
 9e2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <CHANGE_IN_POWER_STATE_FLAG>
 9e6:	81 30       	cpi	r24, 0x01	; 1
 9e8:	31 f4       	brne	.+12     	; 0x9f6 <main+0xce>
			SET_TEMP=eepromRead(0);
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 88 01 	call	0x310	; 0x310 <eepromRead>
 9f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <SET_TEMP>
		}
		
		
		switch(ON_OFF){
 9f6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <ON_OFF>
 9fa:	88 23       	and	r24, r24
 9fc:	19 f0       	breq	.+6      	; 0xa04 <main+0xdc>
 9fe:	81 30       	cpi	r24, 0x01	; 1
 a00:	89 f1       	breq	.+98     	; 0xa64 <main+0x13c>
 a02:	ef cf       	rjmp	.-34     	; 0x9e2 <main+0xba>
			
			case 0:
				Reading_Counter=0;
 a04:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <Reading_Counter>
				Readings_Sum=0;
 a08:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Readings_Sum>
 a0c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Readings_Sum+0x1>
 a10:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Readings_Sum+0x2>
 a14:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Readings_Sum+0x3>
				AVG_TEMP=0;
 a18:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <AVG_TEMP>
				Heater_Led_Flag=0;
 a1c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Heater_Led_Flag>
				Heater_Blink_Counter=0;
 a20:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Heater_Blink_Counter>
 a24:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <Heater_Blink_Counter+0x1>
 a28:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <Heater_Blink_Counter+0x2>
 a2c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <Heater_Blink_Counter+0x3>
				Heater_OnOff_switch=0;
 a30:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Heater_OnOff_switch>
				TEMP_SENSE_COUNTER=0;
 a34:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <TEMP_SENSE_COUNTER>
 a38:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <TEMP_SENSE_COUNTER+0x1>
 a3c:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <TEMP_SENSE_COUNTER+0x2>
 a40:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <TEMP_SENSE_COUNTER+0x3>
				//off leds
				DIO_u8SetPinValue(DIO_PORTC,DIO_PIN2,DIO_PIN_LOW);
 a44:	40 e0       	ldi	r20, 0x00	; 0
 a46:	62 e0       	ldi	r22, 0x02	; 2
 a48:	82 e0       	ldi	r24, 0x02	; 2
 a4a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
				//off heating and cooling elements
				DIO_u8SetPinValue(DIO_PORTC,DIO_PIN0,DIO_PIN_LOW);
 a4e:	40 e0       	ldi	r20, 0x00	; 0
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	82 e0       	ldi	r24, 0x02	; 2
 a54:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
				DIO_u8SetPinValue(DIO_PORTC,DIO_PIN1,DIO_PIN_LOW);
 a58:	40 e0       	ldi	r20, 0x00	; 0
 a5a:	61 e0       	ldi	r22, 0x01	; 1
 a5c:	82 e0       	ldi	r24, 0x02	; 2
 a5e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
			break;
 a62:	bf cf       	rjmp	.-130    	; 0x9e2 <main+0xba>
			
			case 1:
			
				TIMER0_u8CallBackFunction(TIMER0_CTC_MODE,app_temp_sense_hundred_ms_ctc_timer_zero);
 a64:	6f e0       	ldi	r22, 0x0F	; 15
 a66:	74 e0       	ldi	r23, 0x04	; 4
 a68:	80 e0       	ldi	r24, 0x00	; 0
 a6a:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <TIMER0_u8CallBackFunction>
				TEMP_OUT_SS();
 a6e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <TEMP_OUT_SS>
				
			break;
 a72:	b7 cf       	rjmp	.-146    	; 0x9e2 <main+0xba>

00000a74 <SS_Init>:

// Seven Segment Initialization

void SS_Init(){
		//SEVEN SEGMENT 
		DIO_u8SetPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 a74:	41 e0       	ldi	r20, 0x01	; 1
 a76:	64 e0       	ldi	r22, 0x04	; 4
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 a7e:	41 e0       	ldi	r20, 0x01	; 1
 a80:	65 e0       	ldi	r22, 0x05	; 5
 a82:	80 e0       	ldi	r24, 0x00	; 0
 a84:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 a88:	41 e0       	ldi	r20, 0x01	; 1
 a8a:	66 e0       	ldi	r22, 0x06	; 6
 a8c:	80 e0       	ldi	r24, 0x00	; 0
 a8e:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 a92:	41 e0       	ldi	r20, 0x01	; 1
 a94:	67 e0       	ldi	r22, 0x07	; 7
 a96:	80 e0       	ldi	r24, 0x00	; 0
 a98:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
		
		//SEVEN SEGMENT Transistors 
		
		DIO_u8SetPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 a9c:	41 e0       	ldi	r20, 0x01	; 1
 a9e:	61 e0       	ldi	r22, 0x01	; 1
 aa0:	81 e0       	ldi	r24, 0x01	; 1
 aa2:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_OUTPUT);
 aa6:	41 e0       	ldi	r20, 0x01	; 1
 aa8:	60 e0       	ldi	r22, 0x00	; 0
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	0e 94 76 00 	call	0xec	; 0xec <DIO_u8SetPinDirection>
 ab0:	08 95       	ret

00000ab2 <SS_DISPLAY>:
}
// Function to display a number on a single 7-segment display
void SS_DISPLAY(u8 number){
	ASSIGN_BIT(PORTA, 4, GET_BIT(number, 0));
 ab2:	9b b3       	in	r25, 0x1b	; 27
 ab4:	68 2f       	mov	r22, r24
 ab6:	61 70       	andi	r22, 0x01	; 1
 ab8:	70 e0       	ldi	r23, 0x00	; 0
 aba:	62 95       	swap	r22
 abc:	72 95       	swap	r23
 abe:	70 7f       	andi	r23, 0xF0	; 240
 ac0:	76 27       	eor	r23, r22
 ac2:	60 7f       	andi	r22, 0xF0	; 240
 ac4:	76 27       	eor	r23, r22
 ac6:	9f 7e       	andi	r25, 0xEF	; 239
 ac8:	69 2b       	or	r22, r25
 aca:	6b bb       	out	0x1b, r22	; 27
	ASSIGN_BIT(PORTA, 5, GET_BIT(number, 1));
 acc:	9b b3       	in	r25, 0x1b	; 27
 ace:	81 fb       	bst	r24, 1
 ad0:	44 27       	eor	r20, r20
 ad2:	40 f9       	bld	r20, 0
 ad4:	50 e0       	ldi	r21, 0x00	; 0
 ad6:	44 0f       	add	r20, r20
 ad8:	55 1f       	adc	r21, r21
 ada:	42 95       	swap	r20
 adc:	52 95       	swap	r21
 ade:	50 7f       	andi	r21, 0xF0	; 240
 ae0:	54 27       	eor	r21, r20
 ae2:	40 7f       	andi	r20, 0xF0	; 240
 ae4:	54 27       	eor	r21, r20
 ae6:	9f 7d       	andi	r25, 0xDF	; 223
 ae8:	49 2b       	or	r20, r25
 aea:	4b bb       	out	0x1b, r20	; 27
	ASSIGN_BIT(PORTA, 6, GET_BIT(number, 2));
 aec:	9b b3       	in	r25, 0x1b	; 27
 aee:	82 fb       	bst	r24, 2
 af0:	22 27       	eor	r18, r18
 af2:	20 f9       	bld	r18, 0
 af4:	30 e0       	ldi	r19, 0x00	; 0
 af6:	00 24       	eor	r0, r0
 af8:	36 95       	lsr	r19
 afa:	27 95       	ror	r18
 afc:	07 94       	ror	r0
 afe:	36 95       	lsr	r19
 b00:	27 95       	ror	r18
 b02:	07 94       	ror	r0
 b04:	32 2f       	mov	r19, r18
 b06:	20 2d       	mov	r18, r0
 b08:	9f 7b       	andi	r25, 0xBF	; 191
 b0a:	29 2b       	or	r18, r25
 b0c:	2b bb       	out	0x1b, r18	; 27
	ASSIGN_BIT(PORTA, 7, GET_BIT(number, 3));
 b0e:	2b b3       	in	r18, 0x1b	; 27
 b10:	86 95       	lsr	r24
 b12:	86 95       	lsr	r24
 b14:	86 95       	lsr	r24
 b16:	30 e8       	ldi	r19, 0x80	; 128
 b18:	83 9f       	mul	r24, r19
 b1a:	c0 01       	movw	r24, r0
 b1c:	11 24       	eor	r1, r1
 b1e:	92 2f       	mov	r25, r18
 b20:	9f 77       	andi	r25, 0x7F	; 127
 b22:	89 2b       	or	r24, r25
 b24:	8b bb       	out	0x1b, r24	; 27
 b26:	08 95       	ret

00000b28 <SS_SELECTED_DISPLAY>:
}

// Function to select which 7-segment display is active
void SS_SELECTED_DISPLAY(u8 display){
 b28:	cf 93       	push	r28
 b2a:	c8 2f       	mov	r28, r24
	DIO_u8SetPinValue(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);   // Turn off both displays
 b2c:	40 e0       	ldi	r20, 0x00	; 0
 b2e:	61 e0       	ldi	r22, 0x01	; 1
 b30:	81 e0       	ldi	r24, 0x01	; 1
 b32:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PORTB, DIO_PIN0, DIO_PIN_LOW);   // Turn off both displays
 b36:	40 e0       	ldi	r20, 0x00	; 0
 b38:	60 e0       	ldi	r22, 0x00	; 0
 b3a:	81 e0       	ldi	r24, 0x01	; 1
 b3c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
	
	if (display == 1) {
 b40:	c1 30       	cpi	r28, 0x01	; 1
 b42:	31 f4       	brne	.+12     	; 0xb50 <SS_SELECTED_DISPLAY+0x28>
		DIO_u8SetPinValue(DIO_PORTB, DIO_PIN1, DIO_PIN_HIGH);  // Enable display 1 (e.g., PB1)
 b44:	41 e0       	ldi	r20, 0x01	; 1
 b46:	61 e0       	ldi	r22, 0x01	; 1
 b48:	81 e0       	ldi	r24, 0x01	; 1
 b4a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <SS_SELECTED_DISPLAY+0x36>
	}
	else if (display == 2) {
 b50:	c2 30       	cpi	r28, 0x02	; 2
 b52:	29 f4       	brne	.+10     	; 0xb5e <SS_SELECTED_DISPLAY+0x36>
		DIO_u8SetPinValue(DIO_PORTB, DIO_PIN0, DIO_PIN_HIGH);  // Enable display 2 (e.g., PB2)
 b54:	41 e0       	ldi	r20, 0x01	; 1
 b56:	60 e0       	ldi	r22, 0x00	; 0
 b58:	81 e0       	ldi	r24, 0x01	; 1
 b5a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
	}
}
 b5e:	cf 91       	pop	r28
 b60:	08 95       	ret

00000b62 <SS_DOUBLE_DIGIT_DISPLAY>:

// Function to display two digits on two 7-segment displays using multiplexing
void SS_DOUBLE_DIGIT_DISPLAY(u8 number){
 b62:	1f 93       	push	r17
 b64:	cf 93       	push	r28
 b66:	df 93       	push	r29
	u8 units = number % 10;  // Extract the units digit
 b68:	dd ec       	ldi	r29, 0xCD	; 205
 b6a:	8d 9f       	mul	r24, r29
 b6c:	d1 2d       	mov	r29, r1
 b6e:	11 24       	eor	r1, r1
 b70:	1d 2f       	mov	r17, r29
 b72:	16 95       	lsr	r17
 b74:	16 95       	lsr	r17
 b76:	16 95       	lsr	r17
 b78:	11 0f       	add	r17, r17
 b7a:	91 2f       	mov	r25, r17
 b7c:	99 0f       	add	r25, r25
 b7e:	99 0f       	add	r25, r25
 b80:	19 0f       	add	r17, r25
 b82:	81 1b       	sub	r24, r17
 b84:	18 2f       	mov	r17, r24
	u8 tens = number / 10;   // Extract the tens digit
 b86:	d6 95       	lsr	r29
 b88:	d6 95       	lsr	r29
 b8a:	d6 95       	lsr	r29
	
	for (u8 count = 0; count < 20; count++) {   // Loop to refresh the display
 b8c:	c0 e0       	ldi	r28, 0x00	; 0
 b8e:	23 c0       	rjmp	.+70     	; 0xbd6 <SS_DOUBLE_DIGIT_DISPLAY+0x74>
		SS_SELECTED_DISPLAY(1);   // Select first 7-segment display
 b90:	81 e0       	ldi	r24, 0x01	; 1
 b92:	0e 94 94 05 	call	0xb28	; 0xb28 <SS_SELECTED_DISPLAY>
		SS_DISPLAY(units);        // Display the units digit
 b96:	81 2f       	mov	r24, r17
 b98:	0e 94 59 05 	call	0xab2	; 0xab2 <SS_DISPLAY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b9c:	8f e3       	ldi	r24, 0x3F	; 63
 b9e:	9c e9       	ldi	r25, 0x9C	; 156
 ba0:	01 97       	sbiw	r24, 0x01	; 1
 ba2:	f1 f7       	brne	.-4      	; 0xba0 <SS_DOUBLE_DIGIT_DISPLAY+0x3e>
 ba4:	00 c0       	rjmp	.+0      	; 0xba6 <SS_DOUBLE_DIGIT_DISPLAY+0x44>
 ba6:	00 00       	nop
		_delay_ms(10);             // Small delay for multiplexing
		
		SS_SELECTED_DISPLAY(2);   // Select second 7-segment display
 ba8:	82 e0       	ldi	r24, 0x02	; 2
 baa:	0e 94 94 05 	call	0xb28	; 0xb28 <SS_SELECTED_DISPLAY>
		SS_DISPLAY(tens);         // Display the tens digit
 bae:	8d 2f       	mov	r24, r29
 bb0:	0e 94 59 05 	call	0xab2	; 0xab2 <SS_DISPLAY>
 bb4:	8f e3       	ldi	r24, 0x3F	; 63
 bb6:	9c e9       	ldi	r25, 0x9C	; 156
 bb8:	01 97       	sbiw	r24, 0x01	; 1
 bba:	f1 f7       	brne	.-4      	; 0xbb8 <SS_DOUBLE_DIGIT_DISPLAY+0x56>
 bbc:	00 c0       	rjmp	.+0      	; 0xbbe <SS_DOUBLE_DIGIT_DISPLAY+0x5c>
 bbe:	00 00       	nop
		_delay_ms(10);             // Small delay for multiplexing

	DIO_u8SetPinValue(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);   // Turn off both displays
 bc0:	40 e0       	ldi	r20, 0x00	; 0
 bc2:	61 e0       	ldi	r22, 0x01	; 1
 bc4:	81 e0       	ldi	r24, 0x01	; 1
 bc6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PORTB, DIO_PIN0, DIO_PIN_LOW);   // Turn off both displays
 bca:	40 e0       	ldi	r20, 0x00	; 0
 bcc:	60 e0       	ldi	r22, 0x00	; 0
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
// Function to display two digits on two 7-segment displays using multiplexing
void SS_DOUBLE_DIGIT_DISPLAY(u8 number){
	u8 units = number % 10;  // Extract the units digit
	u8 tens = number / 10;   // Extract the tens digit
	
	for (u8 count = 0; count < 20; count++) {   // Loop to refresh the display
 bd4:	cf 5f       	subi	r28, 0xFF	; 255
 bd6:	c4 31       	cpi	r28, 0x14	; 20
 bd8:	d8 f2       	brcs	.-74     	; 0xb90 <SS_DOUBLE_DIGIT_DISPLAY+0x2e>
		_delay_ms(10);             // Small delay for multiplexing

	DIO_u8SetPinValue(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);   // Turn off both displays
	DIO_u8SetPinValue(DIO_PORTB, DIO_PIN0, DIO_PIN_LOW);   // Turn off both displays
	}
}
 bda:	df 91       	pop	r29
 bdc:	cf 91       	pop	r28
 bde:	1f 91       	pop	r17
 be0:	08 95       	ret

00000be2 <SS_ONE_SEC_BLINK>:

void SS_ONE_SEC_BLINK (){
	DIO_u8SetPinValue(DIO_PORTB, DIO_PIN0, DIO_PIN_LOW);
 be2:	40 e0       	ldi	r20, 0x00	; 0
 be4:	60 e0       	ldi	r22, 0x00	; 0
 be6:	81 e0       	ldi	r24, 0x01	; 1
 be8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_PORTB, DIO_PIN1, DIO_PIN_LOW);
 bec:	40 e0       	ldi	r20, 0x00	; 0
 bee:	61 e0       	ldi	r22, 0x01	; 1
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DIO_u8SetPinValue>
 bf6:	2f ef       	ldi	r18, 0xFF	; 255
 bf8:	83 ed       	ldi	r24, 0xD3	; 211
 bfa:	90 e3       	ldi	r25, 0x30	; 48
 bfc:	21 50       	subi	r18, 0x01	; 1
 bfe:	80 40       	sbci	r24, 0x00	; 0
 c00:	90 40       	sbci	r25, 0x00	; 0
 c02:	e1 f7       	brne	.-8      	; 0xbfc <SS_ONE_SEC_BLINK+0x1a>
 c04:	00 c0       	rjmp	.+0      	; 0xc06 <SS_ONE_SEC_BLINK+0x24>
 c06:	00 00       	nop
 c08:	08 95       	ret

00000c0a <SS_OUT>:
	_delay_ms(1000);
}

void SS_OUT(u8 number){
 c0a:	cf 93       	push	r28
 c0c:	c8 2f       	mov	r28, r24
	if (number > 9) {
 c0e:	8a 30       	cpi	r24, 0x0A	; 10
 c10:	18 f0       	brcs	.+6      	; 0xc18 <SS_OUT+0xe>
		SS_DOUBLE_DIGIT_DISPLAY(number);  // Display two digits for numbers greater than 9
 c12:	0e 94 b1 05 	call	0xb62	; 0xb62 <SS_DOUBLE_DIGIT_DISPLAY>
 c16:	06 c0       	rjmp	.+12     	; 0xc24 <SS_OUT+0x1a>
	}
	else {
		SS_SELECTED_DISPLAY(1);           // Select first display
 c18:	81 e0       	ldi	r24, 0x01	; 1
 c1a:	0e 94 94 05 	call	0xb28	; 0xb28 <SS_SELECTED_DISPLAY>
		SS_DISPLAY(number);               // Display single digit for numbers 0 to 9
 c1e:	8c 2f       	mov	r24, r28
 c20:	0e 94 59 05 	call	0xab2	; 0xab2 <SS_DISPLAY>
	}
}
 c24:	cf 91       	pop	r28
 c26:	08 95       	ret

00000c28 <TIMER2_voidInit>:

void TIMER2_voidInit(void)
{
	#if TIMER2_WAVE_GEN_MODE == TIMER2_CTC_MODE
	/*set ctc mode */
	SET_BIT(TCCR2,1);
 c28:	85 b5       	in	r24, 0x25	; 37
 c2a:	82 60       	ori	r24, 0x02	; 2
 c2c:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,0);
 c2e:	85 b5       	in	r24, 0x25	; 37
 c30:	8e 7f       	andi	r24, 0xFE	; 254
 c32:	85 bd       	out	0x25, r24	; 37

	/*set prescaler*/
	TCCR2 &= 0b11111000;
 c34:	85 b5       	in	r24, 0x25	; 37
 c36:	88 7f       	andi	r24, 0xF8	; 248
 c38:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= TIMER2_PRESCALER;
 c3a:	85 b5       	in	r24, 0x25	; 37
 c3c:	84 60       	ori	r24, 0x04	; 4
 c3e:	85 bd       	out	0x25, r24	; 37

	/*set compare value*/
	OCR2 = TIMER2_COMPARE_MATCH_VALUE;
 c40:	8a ef       	ldi	r24, 0xFA	; 250
 c42:	83 bd       	out	0x23, r24	; 35

	/*enable ctc interrupt*/
	SET_BIT(TIMSK,7);
 c44:	89 b7       	in	r24, 0x39	; 57
 c46:	80 68       	ori	r24, 0x80	; 128
 c48:	89 bf       	out	0x39, r24	; 57
 c4a:	08 95       	ret

00000c4c <TIMER2_u8CallBackFunction>:
u8 TIMER2_u8CallBackFunction(u8 copy_modeID , void (*Application_function)(void))
{
	
	u8 local_u8_error_state = OK;
	
	if(Application_function != NULL)
 c4c:	61 15       	cp	r22, r1
 c4e:	71 05       	cpc	r23, r1
 c50:	41 f0       	breq	.+16     	; 0xc62 <TIMER2_u8CallBackFunction+0x16>
	{
		if(copy_modeID == TIMER2_CTC_MODE)
 c52:	81 11       	cpse	r24, r1
 c54:	08 c0       	rjmp	.+16     	; 0xc66 <TIMER2_u8CallBackFunction+0x1a>
		global_app_func_ctc=Application_function;
 c56:	70 93 81 00 	sts	0x0081, r23	; 0x800081 <global_app_func_ctc+0x1>
 c5a:	60 93 80 00 	sts	0x0080, r22	; 0x800080 <global_app_func_ctc>

}
u8 TIMER2_u8CallBackFunction(u8 copy_modeID , void (*Application_function)(void))
{
	
	u8 local_u8_error_state = OK;
 c5e:	81 e0       	ldi	r24, 0x01	; 1
 c60:	08 95       	ret
		else
		local_u8_error_state = NOK ;
	}
	else
	{
		local_u8_error_state = NOK ;
 c62:	80 e0       	ldi	r24, 0x00	; 0
 c64:	08 95       	ret
		global_app_func_ctc=Application_function;
		

		
		else
		local_u8_error_state = NOK ;
 c66:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return local_u8_error_state;
	
	
}
 c68:	08 95       	ret

00000c6a <__vector_4>:

/*isr ctc*/
void __vector_4 (void) __attribute__((signal));
void __vector_4 (void)
{
 c6a:	1f 92       	push	r1
 c6c:	0f 92       	push	r0
 c6e:	0f b6       	in	r0, 0x3f	; 63
 c70:	0f 92       	push	r0
 c72:	11 24       	eor	r1, r1
 c74:	2f 93       	push	r18
 c76:	3f 93       	push	r19
 c78:	4f 93       	push	r20
 c7a:	5f 93       	push	r21
 c7c:	6f 93       	push	r22
 c7e:	7f 93       	push	r23
 c80:	8f 93       	push	r24
 c82:	9f 93       	push	r25
 c84:	af 93       	push	r26
 c86:	bf 93       	push	r27
 c88:	ef 93       	push	r30
 c8a:	ff 93       	push	r31
	if (global_app_func_ctc != NULL)
 c8c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <global_app_func_ctc>
 c90:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <global_app_func_ctc+0x1>
 c94:	30 97       	sbiw	r30, 0x00	; 0
 c96:	09 f0       	breq	.+2      	; 0xc9a <__vector_4+0x30>
	{
		global_app_func_ctc();
 c98:	09 95       	icall
	}

}
 c9a:	ff 91       	pop	r31
 c9c:	ef 91       	pop	r30
 c9e:	bf 91       	pop	r27
 ca0:	af 91       	pop	r26
 ca2:	9f 91       	pop	r25
 ca4:	8f 91       	pop	r24
 ca6:	7f 91       	pop	r23
 ca8:	6f 91       	pop	r22
 caa:	5f 91       	pop	r21
 cac:	4f 91       	pop	r20
 cae:	3f 91       	pop	r19
 cb0:	2f 91       	pop	r18
 cb2:	0f 90       	pop	r0
 cb4:	0f be       	out	0x3f, r0	; 63
 cb6:	0f 90       	pop	r0
 cb8:	1f 90       	pop	r1
 cba:	18 95       	reti

00000cbc <__vector_5>:

/*isr ovf*/
void __vector_5 (void) __attribute__((signal));
void __vector_5 (void)
{
 cbc:	1f 92       	push	r1
 cbe:	0f 92       	push	r0
 cc0:	0f b6       	in	r0, 0x3f	; 63
 cc2:	0f 92       	push	r0
 cc4:	11 24       	eor	r1, r1
	if (global_app_func_ovf != NULL)
	{
		global_app_func_ovf();
	}

 cc6:	0f 90       	pop	r0
 cc8:	0f be       	out	0x3f, r0	; 63
 cca:	0f 90       	pop	r0
 ccc:	1f 90       	pop	r1
 cce:	18 95       	reti

00000cd0 <TIMER0_voidInit>:

void TIMER0_voidInit(void)
{
	#if TIMER0_WAVE_GEN_MODE == TIMER0_CTC_MODE
	/*set ctc mode */
	SET_BIT(TCCR0,3);
 cd0:	83 b7       	in	r24, 0x33	; 51
 cd2:	88 60       	ori	r24, 0x08	; 8
 cd4:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,6);
 cd6:	83 b7       	in	r24, 0x33	; 51
 cd8:	8f 7b       	andi	r24, 0xBF	; 191
 cda:	83 bf       	out	0x33, r24	; 51

	/*set prescaler*/
	TCCR0 &= 0b11111000;
 cdc:	83 b7       	in	r24, 0x33	; 51
 cde:	88 7f       	andi	r24, 0xF8	; 248
 ce0:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_PRESCALER;
 ce2:	83 b7       	in	r24, 0x33	; 51
 ce4:	82 60       	ori	r24, 0x02	; 2
 ce6:	83 bf       	out	0x33, r24	; 51

	/*set compare value*/
	OCR0 = TIMER0_COMPARE_MATCH_VALUE;
 ce8:	88 ec       	ldi	r24, 0xC8	; 200
 cea:	8c bf       	out	0x3c, r24	; 60

	/*enable ctc interrupt*/
	SET_BIT(TIMSK,1);
 cec:	89 b7       	in	r24, 0x39	; 57
 cee:	82 60       	ori	r24, 0x02	; 2
 cf0:	89 bf       	out	0x39, r24	; 57
 cf2:	08 95       	ret

00000cf4 <TIMER0_u8CallBackFunction>:
u8 TIMER0_u8CallBackFunction(u8 copy_modeID , void (*Application_function)(void))
{
	
	u8 local_u8_error_state = OK;
	
	if(Application_function != NULL)
 cf4:	61 15       	cp	r22, r1
 cf6:	71 05       	cpc	r23, r1
 cf8:	79 f0       	breq	.+30     	; 0xd18 <TIMER0_u8CallBackFunction+0x24>
	{
		if(copy_modeID == TIMER0_CTC_MODE)
 cfa:	81 11       	cpse	r24, r1
 cfc:	06 c0       	rjmp	.+12     	; 0xd0a <TIMER0_u8CallBackFunction+0x16>
		global_app_func_ctc=Application_function;
 cfe:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <global_app_func_ctc+0x1>
 d02:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <global_app_func_ctc>

}
u8 TIMER0_u8CallBackFunction(u8 copy_modeID , void (*Application_function)(void))
{
	
	u8 local_u8_error_state = OK;
 d06:	81 e0       	ldi	r24, 0x01	; 1
 d08:	08 95       	ret
	if(Application_function != NULL)
	{
		if(copy_modeID == TIMER0_CTC_MODE)
		global_app_func_ctc=Application_function;
		
		else if (copy_modeID == TIMER0_OVF_MODE)
 d0a:	81 30       	cpi	r24, 0x01	; 1
 d0c:	39 f4       	brne	.+14     	; 0xd1c <TIMER0_u8CallBackFunction+0x28>
		global_app_func_ovf=Application_function;
 d0e:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <global_app_func_ovf+0x1>
 d12:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <global_app_func_ovf>
 d16:	08 95       	ret
		else
		local_u8_error_state = NOK ;
	}
	else
	{
		local_u8_error_state = NOK ;
 d18:	80 e0       	ldi	r24, 0x00	; 0
 d1a:	08 95       	ret
		
		else if (copy_modeID == TIMER0_OVF_MODE)
		global_app_func_ovf=Application_function;
		
		else
		local_u8_error_state = NOK ;
 d1c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return local_u8_error_state;
	
	
}
 d1e:	08 95       	ret

00000d20 <__vector_10>:

/*isr ctc*/
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
 d20:	1f 92       	push	r1
 d22:	0f 92       	push	r0
 d24:	0f b6       	in	r0, 0x3f	; 63
 d26:	0f 92       	push	r0
 d28:	11 24       	eor	r1, r1
 d2a:	2f 93       	push	r18
 d2c:	3f 93       	push	r19
 d2e:	4f 93       	push	r20
 d30:	5f 93       	push	r21
 d32:	6f 93       	push	r22
 d34:	7f 93       	push	r23
 d36:	8f 93       	push	r24
 d38:	9f 93       	push	r25
 d3a:	af 93       	push	r26
 d3c:	bf 93       	push	r27
 d3e:	ef 93       	push	r30
 d40:	ff 93       	push	r31
	if (global_app_func_ctc != NULL)
 d42:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <global_app_func_ctc>
 d46:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <global_app_func_ctc+0x1>
 d4a:	30 97       	sbiw	r30, 0x00	; 0
 d4c:	09 f0       	breq	.+2      	; 0xd50 <__vector_10+0x30>
	{
		global_app_func_ctc();
 d4e:	09 95       	icall
	}

}
 d50:	ff 91       	pop	r31
 d52:	ef 91       	pop	r30
 d54:	bf 91       	pop	r27
 d56:	af 91       	pop	r26
 d58:	9f 91       	pop	r25
 d5a:	8f 91       	pop	r24
 d5c:	7f 91       	pop	r23
 d5e:	6f 91       	pop	r22
 d60:	5f 91       	pop	r21
 d62:	4f 91       	pop	r20
 d64:	3f 91       	pop	r19
 d66:	2f 91       	pop	r18
 d68:	0f 90       	pop	r0
 d6a:	0f be       	out	0x3f, r0	; 63
 d6c:	0f 90       	pop	r0
 d6e:	1f 90       	pop	r1
 d70:	18 95       	reti

00000d72 <__vector_11>:

/*isr ovf*/
void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
 d72:	1f 92       	push	r1
 d74:	0f 92       	push	r0
 d76:	0f b6       	in	r0, 0x3f	; 63
 d78:	0f 92       	push	r0
 d7a:	11 24       	eor	r1, r1
 d7c:	2f 93       	push	r18
 d7e:	3f 93       	push	r19
 d80:	4f 93       	push	r20
 d82:	5f 93       	push	r21
 d84:	6f 93       	push	r22
 d86:	7f 93       	push	r23
 d88:	8f 93       	push	r24
 d8a:	9f 93       	push	r25
 d8c:	af 93       	push	r26
 d8e:	bf 93       	push	r27
 d90:	ef 93       	push	r30
 d92:	ff 93       	push	r31
	if (global_app_func_ovf != NULL)
 d94:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <global_app_func_ovf>
 d98:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <global_app_func_ovf+0x1>
 d9c:	30 97       	sbiw	r30, 0x00	; 0
 d9e:	09 f0       	breq	.+2      	; 0xda2 <__vector_11+0x30>
	{
		global_app_func_ovf();
 da0:	09 95       	icall
	}

 da2:	ff 91       	pop	r31
 da4:	ef 91       	pop	r30
 da6:	bf 91       	pop	r27
 da8:	af 91       	pop	r26
 daa:	9f 91       	pop	r25
 dac:	8f 91       	pop	r24
 dae:	7f 91       	pop	r23
 db0:	6f 91       	pop	r22
 db2:	5f 91       	pop	r21
 db4:	4f 91       	pop	r20
 db6:	3f 91       	pop	r19
 db8:	2f 91       	pop	r18
 dba:	0f 90       	pop	r0
 dbc:	0f be       	out	0x3f, r0	; 63
 dbe:	0f 90       	pop	r0
 dc0:	1f 90       	pop	r1
 dc2:	18 95       	reti

00000dc4 <__udivmodsi4>:
 dc4:	a1 e2       	ldi	r26, 0x21	; 33
 dc6:	1a 2e       	mov	r1, r26
 dc8:	aa 1b       	sub	r26, r26
 dca:	bb 1b       	sub	r27, r27
 dcc:	fd 01       	movw	r30, r26
 dce:	0d c0       	rjmp	.+26     	; 0xdea <__udivmodsi4_ep>

00000dd0 <__udivmodsi4_loop>:
 dd0:	aa 1f       	adc	r26, r26
 dd2:	bb 1f       	adc	r27, r27
 dd4:	ee 1f       	adc	r30, r30
 dd6:	ff 1f       	adc	r31, r31
 dd8:	a2 17       	cp	r26, r18
 dda:	b3 07       	cpc	r27, r19
 ddc:	e4 07       	cpc	r30, r20
 dde:	f5 07       	cpc	r31, r21
 de0:	20 f0       	brcs	.+8      	; 0xdea <__udivmodsi4_ep>
 de2:	a2 1b       	sub	r26, r18
 de4:	b3 0b       	sbc	r27, r19
 de6:	e4 0b       	sbc	r30, r20
 de8:	f5 0b       	sbc	r31, r21

00000dea <__udivmodsi4_ep>:
 dea:	66 1f       	adc	r22, r22
 dec:	77 1f       	adc	r23, r23
 dee:	88 1f       	adc	r24, r24
 df0:	99 1f       	adc	r25, r25
 df2:	1a 94       	dec	r1
 df4:	69 f7       	brne	.-38     	; 0xdd0 <__udivmodsi4_loop>
 df6:	60 95       	com	r22
 df8:	70 95       	com	r23
 dfa:	80 95       	com	r24
 dfc:	90 95       	com	r25
 dfe:	9b 01       	movw	r18, r22
 e00:	ac 01       	movw	r20, r24
 e02:	bd 01       	movw	r22, r26
 e04:	cf 01       	movw	r24, r30
 e06:	08 95       	ret

00000e08 <__umulhisi3>:
 e08:	a2 9f       	mul	r26, r18
 e0a:	b0 01       	movw	r22, r0
 e0c:	b3 9f       	mul	r27, r19
 e0e:	c0 01       	movw	r24, r0
 e10:	a3 9f       	mul	r26, r19
 e12:	70 0d       	add	r23, r0
 e14:	81 1d       	adc	r24, r1
 e16:	11 24       	eor	r1, r1
 e18:	91 1d       	adc	r25, r1
 e1a:	b2 9f       	mul	r27, r18
 e1c:	70 0d       	add	r23, r0
 e1e:	81 1d       	adc	r24, r1
 e20:	11 24       	eor	r1, r1
 e22:	91 1d       	adc	r25, r1
 e24:	08 95       	ret

00000e26 <_exit>:
 e26:	f8 94       	cli

00000e28 <__stop_program>:
 e28:	ff cf       	rjmp	.-2      	; 0xe28 <__stop_program>
